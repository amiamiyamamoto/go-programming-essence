// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: proto/helloworld.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Helloworld_Call_FullMethodName         = "/helloworld.Helloworld/Call"
	Helloworld_ClientStream_FullMethodName = "/helloworld.Helloworld/ClientStream"
	Helloworld_ServerStream_FullMethodName = "/helloworld.Helloworld/ServerStream"
	Helloworld_BidiStream_FullMethodName   = "/helloworld.Helloworld/BidiStream"
)

// HelloworldClient is the client API for Helloworld service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloworldClient interface {
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ClientStreamRequest, ClientStreamResponse], error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerStreamResponse], error)
	BidiStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BidiStreamRequest, BidiStreamResponse], error)
}

type helloworldClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloworldClient(cc grpc.ClientConnInterface) HelloworldClient {
	return &helloworldClient{cc}
}

func (c *helloworldClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, Helloworld_Call_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ClientStreamRequest, ClientStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Helloworld_ServiceDesc.Streams[0], Helloworld_ClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientStreamRequest, ClientStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Helloworld_ClientStreamClient = grpc.ClientStreamingClient[ClientStreamRequest, ClientStreamResponse]

func (c *helloworldClient) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Helloworld_ServiceDesc.Streams[1], Helloworld_ServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ServerStreamRequest, ServerStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Helloworld_ServerStreamClient = grpc.ServerStreamingClient[ServerStreamResponse]

func (c *helloworldClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BidiStreamRequest, BidiStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Helloworld_ServiceDesc.Streams[2], Helloworld_BidiStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BidiStreamRequest, BidiStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Helloworld_BidiStreamClient = grpc.BidiStreamingClient[BidiStreamRequest, BidiStreamResponse]

// HelloworldServer is the server API for Helloworld service.
// All implementations must embed UnimplementedHelloworldServer
// for forward compatibility.
type HelloworldServer interface {
	Call(context.Context, *CallRequest) (*CallResponse, error)
	ClientStream(grpc.ClientStreamingServer[ClientStreamRequest, ClientStreamResponse]) error
	ServerStream(*ServerStreamRequest, grpc.ServerStreamingServer[ServerStreamResponse]) error
	BidiStream(grpc.BidiStreamingServer[BidiStreamRequest, BidiStreamResponse]) error
	mustEmbedUnimplementedHelloworldServer()
}

// UnimplementedHelloworldServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHelloworldServer struct{}

func (UnimplementedHelloworldServer) Call(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedHelloworldServer) ClientStream(grpc.ClientStreamingServer[ClientStreamRequest, ClientStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedHelloworldServer) ServerStream(*ServerStreamRequest, grpc.ServerStreamingServer[ServerStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedHelloworldServer) BidiStream(grpc.BidiStreamingServer[BidiStreamRequest, BidiStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BidiStream not implemented")
}
func (UnimplementedHelloworldServer) mustEmbedUnimplementedHelloworldServer() {}
func (UnimplementedHelloworldServer) testEmbeddedByValue()                    {}

// UnsafeHelloworldServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloworldServer will
// result in compilation errors.
type UnsafeHelloworldServer interface {
	mustEmbedUnimplementedHelloworldServer()
}

func RegisterHelloworldServer(s grpc.ServiceRegistrar, srv HelloworldServer) {
	// If the following call pancis, it indicates UnimplementedHelloworldServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Helloworld_ServiceDesc, srv)
}

func _Helloworld_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Helloworld_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Helloworld_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloworldServer).ClientStream(&grpc.GenericServerStream[ClientStreamRequest, ClientStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Helloworld_ClientStreamServer = grpc.ClientStreamingServer[ClientStreamRequest, ClientStreamResponse]

func _Helloworld_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloworldServer).ServerStream(m, &grpc.GenericServerStream[ServerStreamRequest, ServerStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Helloworld_ServerStreamServer = grpc.ServerStreamingServer[ServerStreamResponse]

func _Helloworld_BidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloworldServer).BidiStream(&grpc.GenericServerStream[BidiStreamRequest, BidiStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Helloworld_BidiStreamServer = grpc.BidiStreamingServer[BidiStreamRequest, BidiStreamResponse]

// Helloworld_ServiceDesc is the grpc.ServiceDesc for Helloworld service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Helloworld_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Helloworld",
	HandlerType: (*HelloworldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _Helloworld_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _Helloworld_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _Helloworld_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidiStream",
			Handler:       _Helloworld_BidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/helloworld.proto",
}
